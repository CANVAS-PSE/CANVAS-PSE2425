[project]
name = "canvas"
version = "1.0-beta"
description = "An web-based 3D editor for ARTIST"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
  "django",
  "djangorestframework",
  "artist-csp @ git+https://github.com/ARTIST-Association/ARTIST.git",
  "torch",
  "requests",
  "django-cleanup",
  "django-allauth",
  "PyJWT",
  "python-dotenv",
  "cryptography",
  "Pillow",
]

[project.optional-dependencies]
dev = [
  "mypy",
  "ruff",
  "pre-commit",
  "coverage",
  "parameterized",
  "unittest-xml-reporting",
]

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
# This line tells Setuptools to look in the src/ directory for packages.
package-dir = { "" = "src" }

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11.
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["N", "E4", "E7", "E9", "F", "D"]
ignore = ["D100", "D104"]
# Enable import sorting
extend-select = ["I"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.djlint]
profile = "django"

[tool.coverage]
[tool.coverage.run]
omit = [
  "*/migrations/*",
  "*/tests/*",
  "*/admin.py",
  "*/apps.py",
  "*/wsgi.py",
  "*/__init__.py",
  "/tmp/*",
  "/var/tmp/*",
]

[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",

  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self\\.debug",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if __name__ == .__main__.:",

  # Ignore logging statements
  "import logging",
  "logging\\.basicConfig",
  "logging\\.getLogger",
]
