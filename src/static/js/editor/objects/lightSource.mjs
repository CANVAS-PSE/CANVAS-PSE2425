import { CanvasObject } from "canvasObject";
import { DeleteLightSourceCommand } from "deleteCommands";
import { DuplicateLightSourceCommand } from "duplicateCommands";
import {
  HeaderInspectorComponent,
  SingleFieldInspectorComponent,
  SelectFieldInspectorComponent,
  InspectorComponent,
} from "inspectorComponents";
import { UndoRedoHandler } from "undoRedoHandler";
import { UpdateLightsourceCommand } from "updateCommands";

/**
 * Class that represents the light source object
 */
export class LightSource extends CanvasObject {
  apiID;
  /**
   * The number of rays generated by the light source.
   */
  numberOfRays;
  /**
   * The type of light source used, e.g. a sun.
   */
  lightSourceType;
  /**
   * The distribution type used to model the light source.
   */
  distributionType;
  /**
   * The mean used for modeling the light source.
   */
  distributionMean;
  /**
   * The covariance used for modeling the light source.
   */
  distributionCovariance;

  #header;
  #numberOfRaysComponent;
  #lightsourceTypeComponent;
  #distributionTypeComponent;
  #distributionMeanComponent;
  #distributionCovarianceComponent;

  #undoRedoHandler = UndoRedoHandler.getInstance();
  #isMovable = false;
  #rotatableAxis = null;

  /**
   * Create the light source object
   * @param {string} lightSourceName the name of the lightsource
   * @param {number} numberOfRays the number of rays the light source has
   * @param {string} lightSourceType the type of the light source
   * @param {string} distributionType the type of the distribution
   * @param {number} distributionMean the mean of the distribution
   * @param {number} distributionCovariance the covariance of the distribution
   * @param {number} [apiID] the id for api usage
   */
  constructor(
    lightSourceName,
    numberOfRays,
    lightSourceType,
    distributionType,
    distributionMean,
    distributionCovariance,
    apiID = null,
  ) {
    super(lightSourceName);
    this.apiID = apiID;
    this.numberOfRays = numberOfRays;
    this.lightSourceType = lightSourceType;
    this.distributionType = distributionType;
    this.distributionMean = distributionMean;
    this.distributionCovariance = distributionCovariance;

    this.#header = new HeaderInspectorComponent(
      () =>
        this.objectName !== "" && this.objectName
          ? this.objectName
          : "Light source",
      (newValue) => this.updateAndSaveObjectName(newValue),
      this,
    );

    this.#numberOfRaysComponent = new SingleFieldInspectorComponent(
      "Number of rays",
      "number",
      () => this.numberOfRays,
      (newValue) => {
        this.#undoRedoHandler.executeCommand(
          new UpdateLightsourceCommand(this, "numberOfRays", newValue),
        );
      },
      -Infinity,
    );

    this.#lightsourceTypeComponent = new SelectFieldInspectorComponent(
      "Lightsource Type",
      [{ label: "sun", value: "sun" }],
      () => this.lightSourceType,
      (newValue) => {
        this.#undoRedoHandler.executeCommand(
          new UpdateLightsourceCommand(this, "lightSourceType", newValue),
        );
      },
    );

    this.#distributionTypeComponent = new SelectFieldInspectorComponent(
      "Distribution Type",
      [{ label: "normal", value: "normal" }],
      () => this.distributionType,
      (newValue) => {
        this.#undoRedoHandler.executeCommand(
          new UpdateLightsourceCommand(this, "distributionType", newValue),
        );
      },
    );

    this.#distributionMeanComponent = new SingleFieldInspectorComponent(
      "Mean",
      "number",
      () => this.distributionMean,
      (newValue) => {
        this.#undoRedoHandler.executeCommand(
          new UpdateLightsourceCommand(this, "distributionMean", newValue),
        );
      },
      -Infinity,
    );

    this.#distributionCovarianceComponent = new SingleFieldInspectorComponent(
      "Covariance",
      "number",
      () => this.distributionCovariance,
      (newValue) => {
        this.#undoRedoHandler.executeCommand(
          new UpdateLightsourceCommand(
            this,
            "distributionCovariance",
            newValue,
          ),
        );
      },
      -Infinity,
    );
  }

  /**
   * Update and save the name of the object
   * @param {string} name the new name
   */
  updateAndSaveObjectName(name) {
    this.#undoRedoHandler.executeCommand(
      new UpdateLightsourceCommand(this, "objectName", name),
    );
  }

  /**
   * Duplicate the object
   */
  duplicate() {
    this.#undoRedoHandler.executeCommand(new DuplicateLightSourceCommand(this));
  }
  /**
   * Delete the object
   */
  delete() {
    this.#undoRedoHandler.executeCommand(new DeleteLightSourceCommand(this));
  }

  /**
   * Returns whether the lightsource is rotatable or not
   * @returns {string[]} false, as the lightsource is not rotatable
   */
  get rotatableAxis() {
    return this.#rotatableAxis;
  }

  /**
   * Returns whether the lightsource is movable or not
   * @returns {boolean} false, as the lightsource is movable
   */
  get isMovable() {
    return this.#isMovable;
  }

  /**
   * Get wether the object is selectable
   * @returns {boolean} if the object is selectable
   */
  get isSelectable() {
    return false;
  }

  /**
   * Get an array of all inspectorComponents used for this object
   * @returns {InspectorComponent[]} array of all inspectorComponents
   */
  get inspectorComponents() {
    return [
      this.#header,
      this.#numberOfRaysComponent,
      this.#lightsourceTypeComponent,
      this.#distributionTypeComponent,
      this.#distributionMeanComponent,
      this.#distributionCovarianceComponent,
    ];
  }
}
